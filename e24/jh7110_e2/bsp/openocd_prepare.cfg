#write_config_file
# JTAG adapter setup
adapter_khz     10000

interface ftdi
ftdi_device_desc "Olimex OpenOCD JTAG ARM-USB-TINY-H"
ftdi_vid_pid 0x15ba 0x002a
#specify serial id if select 1 of multiple jtag
#ftdi_serial OL32B591

ftdi_layout_init 0x0808 0x0a1b
ftdi_layout_signal nSRST -oe 0x0200
ftdi_layout_signal LED -data 0x0800

#######################################################
# config core(s)/hart(s) to connect

set _CHIPNAME riscv
jtag newtap $_CHIPNAME cpu0 -irlen 5
jtag newtap $_CHIPNAME cpu1 -irlen 5
scan_chain

# -coreid N: hartN, -rtos hwthread: all harts bus only hart0 enabled
# sel_e24: 0 for u7mc, 1 for e2
set sel_e24 0
if { $sel_e24 == 1 } {
	set _TARGETNAME_0 $_CHIPNAME.cpu0

	# e2
	target create $_TARGETNAME_0 riscv -chain-position $_CHIPNAME.cpu0 -rtos hwthread
	#$_TARGETNAME_0 configure -work-area-phys 0x2a020000 -work-area-size 10000 -work-area-backup 1
} else {
	set _TARGETNAME_0 $_CHIPNAME.cpu0
	set _TARGETNAME_1 $_CHIPNAME.cpu1
	set _TARGETNAME_2 $_CHIPNAME.cpu2
	set _TARGETNAME_3 $_CHIPNAME.cpu3
	set _TARGETNAME_4 $_CHIPNAME.cpu4

	# u7mc
	#target create $_TARGETNAME_0 riscv -chain-position $_CHIPNAME.cpu1 -rtos hwthread
	target create $_TARGETNAME_1 riscv -chain-position $_CHIPNAME.cpu1 -coreid 0
	#target create $_TARGETNAME_2 riscv -chain-position $_CHIPNAME.cpu1 -coreid 2
	#target create $_TARGETNAME_3 riscv -chain-position $_CHIPNAME.cpu1 -coreid 3
	#target create $_TARGETNAME_4 riscv -chain-position $_CHIPNAME.cpu1 -coreid 4
	#target smp $_TARGETNAME_0 $_TARGETNAME_1 $_TARGETNAME_2 $_TARGETNAME_3 $_TARGETNAME_4
	#$_TARGETNAME_0 configure -work-area-phys 0x2a020000 -work-area-size 10000 -work-area-backup 1
}

init
halt

if { $sel_e24 == 0 } {
	# e24 is default disabled, shall be enabled from u7mc
	#######enable e24
	##_ENABLE_CLOCK_CLK_U0_E2_SFT7110_CLK_CORE_
	mww phys 0x10230064 0x80000000 ;
	
	##_ENABLE_CLOCK_CLK_U0_E2_SFT7110_CLK_DBG_
	mww phys 0x10230068 0x80000000 ;
	
	##_ENABLE_CLOCK_CLK_U0_E2_SFT7110_RTC_CLK_
	mww phys 0x10230060 0x80000018 ;
	
	##_CLEAR_RESET_RSTGEN_RST_U0_E2_SFT7110_RST_CORE_
	mww phys 0x10230074 0x7fffee ;
}

# zero init L2LIM: secondboot should've done this, if not, read L2LIM will cause exception 1
set zero_L2LIM_len 0
if { $zero_L2LIM_len > 0 } {
	# last 128k is reserved for cache way0
	set L2LIM_size [expr (2 * 1024 - 128) * 1024]
	set L2LIM_start 0x8000000

	if { $zero_L2LIM_len > $L2LIM_size } {
		set zero_L2LIM_len $L2LIM_size
	}
	set end_addr [expr $L2LIM_start + $zero_L2LIM_len]

	set msg [format "zero L2LIM: start 0x%x, size 0x%x" $L2LIM_start $zero_L2LIM_len]
	puts "\n$msg"
	set addr $L2LIM_start
	while { $addr < $end_addr } {
		#set msg [format "wzero %x" $addr]
		#puts "$msg"
		mww phys $addr 0xdeadcafe
		set addr [expr $addr + 4]
	}
	set msg [format "zero L2LIM: size 0x%x done" $zero_L2LIM_len]
	puts "$msg\n"
}

echo "Ready for Remote Connections"
